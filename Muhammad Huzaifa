#include<stdio.h>
#include<string.h>
#include<time.h>
#include<windows.h>

	struct student{
		char name[35];
		char s_item[25];
		char id[10];
	}record;
	
	struct cric{
		int wicket;
		int ball;
		int bat;
	};
	
	struct badminton{
		int racket;
		int shettle;
	};
	
		struct s_equiment{
		struct cric t_cric;
		int voll;
		int ludo;
		int cards;
		int chess;
		struct badminton t_bad;
		int football;
		int table_tennis;
	}total;
	
	typedef struct
	{
		char name[20];
		char pass[20];
	}
	user;

	//Function Decleration
	int crt_manager();//To create manager Account
	user get_user();// to get user name and password input
	void start_screen();// start screen
	int admin_check(char*, char*);// verifying if admin user name and password are valid
	int manager_check(char*, char*);// verifyign if manager name and password are valid
	void display_complain();
	void get_item(char id[8], char str[50]); //checks sports items
	int remove_data(char search[8]);
	int check_id(char search[7]);
	void add_rec_file(void);
	void add_item(void);
	void Remove_item(void);
	void Trace (void);
	void lost_item(void);
	void Report_Complain(void);
	void main_bar(void);
	void del_rec_record(char id[8]);
	void del_rec_warn_a(char id[8]);
	void del_rec_warn_b(char id[8]);
	void set_total();
	int block(char*);
	void item_ret_rec(char*, char*);
	
	int main()
{
	set_total();
	start_screen();
	user admin;
	user manager;
	char choice;
	
	printf("A. Admin\nB. Mananger\nEnter Option: ");
	scanf("%c", &choice);
	
	switch(choice)
	{
		case 'A':
	{	
			case 'a':		
		{
				//Getting user id until it user name and password matches
				do
				{
				system("cls");
				printf("Enter Admin Id and Password\n");	
				admin = get_user();									
				} while(!(admin_check(admin.name, admin.pass))); //checking if admin id and password match in function
			
			int ch,ctr = 0;
			
			do{
				admin:
			system("cls");
			printf("Currently logged in as %s\n\n", admin.name);
			printf("1. Create manager account\n");
			printf("2. Login as manager\n");
			printf("3. Check Complaints\n");
			printf("0. To exit the program\n");
			printf("Choice: ");
			scanf("%d", &ch);
			
			if(ch == 0)
			{
				exit(1);
			}
			else if(ch == 1)
			{
				crt_manager();
				goto admin;
			}
			else if(ch == 3)
			{
				display_complain();
				goto admin;
			}
			}while(ctr == 1);
		}
	}// case A
		case 'B':
			{
			case 'b':
				{
				do
				{
					system("cls");
					printf("Enter Manager ID and Password\n");
					manager = get_user();
				}while(!(manager_check(manager.name,manager.pass)));
				
				printf("Currently logged in as %s",manager.name);
				main_bar();
				
				}
				exit(1);
			}// Case B
		default:
			printf("Invalid Choice!");
			getch();
			exit(2);
					
	}//switch

}
	void set_total()
	{
		total.t_bad.racket = 5;
		total.t_bad.shettle = 5;
		total.table_tennis = 5;
		total.voll = 5;
		total.football = 5;
		total.chess = 5;
		total.ludo = 5;
		total.t_cric.ball = 5;
		total.t_cric.bat = 5;
		total.t_cric.wicket = 5; 
	}
	
	void get_item(char id[8], char str[50])
	{
	
//		printf("%s",str);
		
		if(strstr(str,"kit") != NULL)
		{
			total.t_cric.ball++;
			total.t_cric.bat++;
			total.t_cric.wicket++;
			
//			printf("Record Found: id- %s\n",id);
			printf("Kit returned successfully\n");
			item_ret_rec(id,"kit");
			
		}
		else if(strstr(str,"bat") != NULL)
		{
			total.t_cric.bat++;
			
//			printf("Record Found: id- %s\n",id);
			printf("Bat returned successfully\n");
			item_ret_rec(id,"bat");
		}
		else if(strstr(str,"wicket") != NULL)
		{
			total.t_cric.wicket++;
//			printf("Record Found: id- %s\n",id);
			printf("Wicket returned successfully\n");
			item_ret_rec(id,"wicket");
		}	
		else if(strstr(str,"volleyball") != NULL)
		{
			total.voll++;
//			printf("Record Found: id- %s\n",id);
			printf("Volley retruned Succesfully\n");
			item_ret_rec(id,"volleyball");
		}

		else if(strstr(str,"chess") != NULL)
		{
			total.chess++;
//			printf("Record Found: id- %s\n",id);
			printf("Chess returned sucessfully\n");
			item_ret_rec(id,"chess");
		}
		else if(strstr(str, "ludo") != NULL)
		{
			total.ludo++;
			printf("Ludo returned successfully\n");
			item_ret_rec(id,"ludo");
		}
		else if(strstr(str,"shettle") != NULL || strstr(str,"shuttle") != NULL )
		{
			total.t_bad.shettle++;
//			printf("Record Found: id - %s\n",id);
			printf("Shutlle returned successfully\n");
			item_ret_rec(id,"shuttle");
			
		}
		else if(strstr(str,"rackets") != NULL)
		{
			total.t_bad.racket++;
//			printf("Record Found: id - %s\n",id);
			printf("Rackets returned successfully\n");	
			item_ret_rec(id,"rackets");
		}
		else if(strstr(str,"tabletennis") != NULL)
		{
			total.table_tennis++;
//			printf("Record Found: id - %s\n",id);
			printf("Table Tennis Rackets returned successfully\n");		
			item_ret_rec(id,"tabletennis");
		}
		else if(strstr(str,"football") != NULL)
		{
			total.football++;
//			printf("Record Found: id - %s\n",id);
			printf("Football returned successfully\n");		
			item_ret_rec(id,"football");
		}
		else if(strstr(str,"set") == NULL)
		{
			total.t_bad.racket++;
			total.t_bad.shettle++;
//			printf("Record Found: id- %s\n",id);
			printf("set returned sucessfully\n");			
			item_ret_rec(id,"set");
		}
		else if(strstr(str,"ball") != NULL)
		{
			total.t_cric.ball++;
//			printf("Record Found: id- %s\n",id);
			printf("Ball returned successfully\n");
			item_ret_rec(id,"set");
		}
		printf("Press Enter To Continue... ");
		getch();
		}
		
	int remove_data(char search[8])
	{
		int suc;
		int pass = 0;
		char str1[100]= "";
		char str2[30];
		
		FILE *ptr;
		FILE *temp_ptr;
		
		ptr = fopen("record.txt","r");
		temp_ptr = fopen("temp.txt","w");
		
		while(fgets(str1, 100 ,ptr) != NULL)
		{
			if(strstr(str1,search) != NULL)
			{
				//True-- string found;
				pass = 1;
				get_item(search,str1 );
				suc = 1; // success
			}
			else
			{
				fprintf(temp_ptr,"%s",str1);
			}
		}
		
			fclose(ptr);
			fclose(temp_ptr);
			
			temp_ptr = fopen("temp.txt","r");
			ptr = fopen("record.txt","w");
			
			while(fgets(str2, 100 ,temp_ptr)!= NULL)
			{
				fprintf(ptr,"%s",str2);
			}
			
			fclose(temp_ptr);
			fclose(ptr);
			
			if(pass == 0)
			{
				printf("No data found");
			}
			
			return suc;
		}
	
	int check_id(char search[7])
{
		int j =0, pass = 0;
		char str1[100];
		
		FILE *ptr;
		
		ptr = fopen("record.txt","r");
		
		while(fgets(str1, 100 ,ptr) != NULL)
		{
			
		if(strstr(str1,search)!=0)
		{
			pass = 1;
			break;
		}
		else
		{
			pass = 0;
		}
	}
	
		fclose(ptr);
		
		return pass;
}

	void add_rec_file(void)
	{
	 	FILE *fptr;
	 	
		fptr = fopen("record.txt","a");
		
		if(fptr== NULL)
		{
			printf("Error Opening in file");	
		}
		else
		{
			fprintf(fptr,"%s, %s has been issued %s\n",record.id, record.name,record.s_item);
		}
		
		fclose(fptr);

 }
 
 	// TO ISSUE ITEM
	void add_item()
	{
		char cric_opt[6],sports[15] = "", tt_opt[7], ID[7];	
		int check = 0,check1,check2;
		check = 0;
		int pass;
		
	retake://FOR GOTO
		
		printf("Enter your name: ");
		fflush(stdin);
		gets(record.name);
		
		printf("\nEnter your student id: ");
		fflush(stdin);
		gets(record.id);
		
		check = check_id(record.id);
		check1 = block(record.id);	
//		printf("Block check is: %d",check1);
		if(check ==  1 )
		{
			printf("Already taken item by %s\n",record.id);
			goto retake;
		}
		
		else if(check1 == 1)
		{
			printf("User Id has been blacklisted\n");
			goto retake;
		}
		
		do
		{
			pass = 0;
			
			printf("Enter sports equipment you want to issue:\n1.\"Enter Volleyball\" for Volleyball\n2.\"Enter Cricket\" for cricket\n3.\"Enter TableTennis\" for table tennis\n4.\"Enter Badminton\" for Badminton \n5.\"Enter Football\" for football\n6.\"Enter Ludo\" for Ludo\n6.\"Enter Chess\" for Chess\n Enter options: ");
			scanf("%s",&sports);
			
			strcpy(sports,strlwr(sports));
			
			if(strcmp(sports,"volleyball") == 0 )
			{
				pass = 1;
				
				if(total.voll != 0)
				{
					total.voll = total.voll - 1;	
					printf("\nVolleyBall succesfully issued to %s\n",record.name);
					
					strcpy(record.s_item,sports);
					printf("The total volley left is: %d\n",total.voll);
					
					add_rec_file();
					getch();
				}
				else
				{
					printf("Error! The Volleyball is not available now");
					getch();
				}
			}
			else if(strcmp(sports, "badminton") == 0 )
			{
				printf("%d", total.t_bad.racket);
				pass  = 1;
				
				printf("Enter 'set' for set of badminton or enter 'rackets' for just rackets or enter 'shuttle' for shettle\nYour option: ");
				scanf("%s",&cric_opt );
				
				if(strcmp(cric_opt, "set") == 0 && total.t_bad.racket != 0 && total.t_bad.shettle != 0)
				{
					
					total.t_bad.racket = total.t_bad.racket - 1;
					total.t_bad.shettle = total.t_bad.shettle - 1;
					
					printf("\nTHE BADMINTON has been succesfully issued to %s\n",record.name);
					
					strcpy(record.s_item,cric_opt);
					
					add_rec_file();
					getch();
				}
				else if(strcmp(cric_opt, "rackets") == 0 && total.t_bad.racket != 0)
				{
					total.t_bad.racket = total.t_bad.racket - 1;	
					
					printf("\nThe Racket has been issued succesfully to %s\n", record.name);
					printf("THE total rackets left are %d", total.t_bad.racket);
					
					strcpy(record.s_item,cric_opt);
					
					add_rec_file();
					getch();
					
				}
				else if(strcmp(cric_opt, "shuttle") == 0 && total.t_bad.shettle != 0)
				{
					printf("\nThe shettle has been issued succesfully to %s\n",record.name);
					
					total.t_bad.shettle = total.t_bad.shettle - 1;
				
					printf("THE total shettles left are %d",total.t_bad.shettle);
					
					strcpy(record.s_item,cric_opt);
					
					add_rec_file();
					getch();
				}
				else
				{
					printf("Error! Item not availaible now\n");
					getch();
				}
			}
			else if(strcmp(sports, "tabletennis") == 0 )
			{
				pass = 1;
				if(total.table_tennis != 0 )
				{
					strcpy(record.s_item,sports);
					total.table_tennis = total.table_tennis - 1;
					
					printf("\nTable Tennis rackets issued succesfully to %s\n",record.name);
					printf("The total left is %d",total.table_tennis);
					
					add_rec_file();
					getch();
				
				}
			else
			{
				printf("Error! Racket Not available now");
				getch();		
			}
			
			}
			else if(strcmp(strlwr(sports), "football") == 0)
			{
				pass = 1;
				
				if(total.football != 0)
				{
					total.football = total.football-1; 
					
					printf("\nTOTAL FOOTBALL LEFT is %d\n",total.football);
					printf("\nFootball is succesfully issued to %s\n",record.name);
					
					strcpy(record.s_item,sports);
					
					add_rec_file();
					getch();
					
				}
				else
				{ 
				printf("Error! Football is not available now\n");
				getch();
				}
				
			}
				else if(strcmp(strlwr(sports), "chess") == 0)
				{
					pass = 1;
				if(total.chess!=0)
				{
					strcpy(record.s_item,sports);
					total.chess = total.chess-1; 
					
					printf("\nChess is succesfully issued to %s\n",record.name);
					printf("\nTOTAL CHESS LEFT is %d",total.chess);
					
					add_rec_file();
					getch();
				}
				
				}
				else if(strcmp(strlwr(sports),"ludo") == 0 )
				{
					
				pass = 1;
				
				if(total.ludo != 0)
				{	
					strcpy(record.s_item,sports);
					total.ludo = total.ludo-1; 
					
					printf("\nLodu is succesfully issued to %s\n",record.name);
					printf("\nTotal Ludo left is %d",total.ludo);
					
					add_rec_file();
					getch();
				}
				else
				{ 
				printf("ERROR %s is not avaible",sports);
				getch();
				}
				
			}
			
			else if(strcmp(strlwr(sports), "cricket") == 0)
			{
				printf("\nEnter Kit for whole Kit\nEnter Bat for bat only,\nEnter Ball for ball only,\nEnter Wicket for wicket only\nYour option:  ");
				scanf("%s",&cric_opt);
				
				if(total.t_cric.ball != 0 && total.t_cric.bat != 0 && total.t_cric.wicket != 0 && strcmp(strlwr(cric_opt),"kit") == 0)
				{
					strcpy(record.s_item,cric_opt);
					
					pass = 1;
					
					total.t_cric.ball= total.t_cric.ball-1; 
					total.t_cric.bat= total.t_cric.bat-1; 
					total.t_cric.wicket= total.t_cric.wicket-1; 
					
					printf("\nCricket Kit is succesfully issued to %s\n",record.name);
					
					add_rec_file();
					getch();
				}
				
				else if(strcmp(strlwr(cric_opt),"bat") == 0 && total.t_cric.bat !=0 )
				{
					pass = 1;
					
					strcpy(record.s_item,cric_opt);
					total.t_cric.bat= total.t_cric.bat-1; 
					
					printf("\nBat succesfully issued to %s and left is %d", record.name,total.t_cric.bat);
					
					add_rec_file();
					getch();
				}
				else if(strcmp(strlwr(cric_opt),"ball") == 0 && total.t_cric.ball != 0)
				{
					pass = 1;
					
					strcpy(record.s_item,cric_opt);
					total.t_cric.ball= total.t_cric.ball - 1;
					 
					printf("\nBall succesfully issued to %s and left is %d",record.name,total.t_cric.ball);
					
					add_rec_file();
					getch();
				}
				else if(strcmp(strlwr(cric_opt),"wicket") == 0 && total.t_cric.wicket != 0)
				{
					pass = 1;
					
					strcpy(record.s_item,cric_opt);
					total.t_cric.wicket= total.t_cric.wicket-1;
					
					printf("\nWicket succesfully issued to %s and left is %d",record.name,total.t_cric.wicket);
					
					add_rec_file();
					getch();
				}			
				else
				{ 
					printf("ERROR! The %s is not available now ",cric_opt);
					getch();
				}
				
			}
			
			if(pass == 0)
			{
				printf("You entered invalid choice enter again\n\n");
				getch();
			}
			
	}while(pass == 0);
	
		printf("\nReturning Back to MENU");
		getch();
		main_bar();
	}	
	
	void Remove_item(void)
		{
			char cric_opt[6],sports[15] = "", tt_opt[7], ID[7];
				
			int check = 0;
			int suc;
			check = 0;
			char ptr[10];
			
			printf("Enter your name: ");
			fflush(stdin);
			gets(record.name);
			
			printf("\nEnter your student id: ");
			fflush(stdin);
			gets(record.id);
			
			strcpy(ptr,record.id);
			
			remove_data(ptr);
			main_bar();
		}
		
	void Trace (void)
	{
		char option;
		int pass = 0;
		char str1[100]= "" ;
		
		printf("Press a to print all records.\nPress b print selected id details.\nChoice: ");
		fflush(stdin);	
		scanf("%c",&option);
		
		if(option == 'a')
		{		
		printf("Printing all records:\n");
		
		FILE *ptr;
		ptr = fopen("record.txt","r");
		
		
		while(fgets(str1, 100 , ptr) != NULL)
		{
			printf("\n");
			printf("%s",str1);
			printf("\n");
			pass = 1;
		}
		
		fclose(ptr);
		printf("\nEnter any key to return back to main");
		getch();
		}
		
	else if(option=='b')
	{
		char id[8];
		char str1[100]= "" ;
		
		printf("Enter Id to print details of: ");
		scanf("%s",id);
		
		FILE *ptr;
		
		ptr = fopen("record.txt","r");
		
		while(fgets(str1, 100 , ptr) != NULL)
		{
			if(strstr(str1,id)!=NULL)
			{
				printf("Record Found:\n");
				printf("%s",str1);
				
				pass=1;
				
				printf("\nEnter any key to return back to main");
				getch();
				break;
			}
			else 
			pass = 0;	
		}
		
		fclose(ptr);		
	}
	
	if(pass == 0)
	{
		printf("No record Found");
		printf("\nEnter any key to return back to main");
		getch();
	}
	
	main_bar();	
	}
	
	void lost_item(void)
	{
		char id[8],item[15],str[100],warn_a[50],warn_b[50],str2[100];//zxcsxc
		int pass_a = 0,pass_b=0, pass_c = 0;
		
		printf("Enter Your Id: ");
		scanf("%s",&id);
		
		printf("Enter Item you lost: ");
		scanf("%s",&item);
		
		FILE *warn_1;
		FILE *warn_2;
		FILE *block;
		FILE *record;
			//Writing to block file from file b
		if(pass_b == 0)
		{
	
			warn_2= fopen("warn_b.txt","r+");
			while(fgets(str2,100,warn_2)!=NULL)
			{
				if(strstr(str2,id)!= NULL)
				{
	//				Id found in warning second file...
					pass_c =1;
					
					strcpy(warn_b,str2);
					
					block=fopen("block.txt","w");
					fprintf(block,"%s has lost %s\n",id,item);
					del_rec_warn_b(id);
					del_rec_record(id);
					printf("\nUser Id has been Blacklisted\n");
					printf("Enter any key to continue");
					getch();
					fclose(block);
					
					return;
				}
				else pass_c =0;
		}
			fclose(warn_2);
	}
		
		if(pass_a == 0)
		{
			warn_1= fopen("warn_a.txt","r+");
			
			while(fgets(str,100,warn_1)!=NULL)
			{
				if(strstr(str,id)!= NULL)
				{
					pass_b = 1;
					strcpy(warn_a,str);
					
					warn_2=fopen("warn_b.txt","a+");
					
					fprintf(warn_2,"%s has lost %s\n",id,item);
					del_rec_warn_a(id);		
					del_rec_record(id);			
					printf("\nWarning Two\n");
					printf("Enter any key to continue");
					getch();
					
					fclose(warn_2);
					
					return;
			}
			else
			pass_b = 0;
		}
	fclose(warn_1);
	}
				
	
	if(pass_a == 0)
		{	
		
		record = fopen("record.txt","r+");
		
		while(fgets(str,100,record)!=NULL)
		{
			if(strstr(str,id) != NULL)
			{
//				Id found in warning one file...

				warn_1 = fopen("warn_a.txt","a+");
				
				fprintf(warn_1,"%s has lost %s\n",id,item);
				
				del_rec_record(id);
				
				printf("Warning One\n");
				printf("Enter any key to continue");
				getch();
				
				pass_a = 1;
				
				fclose(warn_1);
				break;
			}	
			else
			pass_a = 0;
	}
	
		fclose(record);
		}
		
		if(pass_c == 0 && pass_b==0 && pass_a ==0)
		{
			printf("Record Not found");
			printf("Enter any key to continue");
			getch();
		}
	}
	
	void Report_Complain(void)
	{
		char complain[500],name[15],id[10];
		system("cls");
		
		printf("Enter your name: ");
		fflush(stdin);
		gets(name);
		
		printf("Enter your Student ID: ");
		fflush(stdin);
		gets(id);
		
		printf("Write your complain: ");
		fflush(stdin);
		gets(complain);
		
		FILE *fcmp;
		
		fcmp = fopen("complain.txt","a");
		
		fprintf(fcmp,"%s %s %s\n",name,id,complain);
		
		fclose(fcmp);
		
		printf("Your complain will be forwarded to the Head of Sports Room.");
		printf("\nReturning Back to MENU");
		
	    getch();
		main_bar();
		
	}
	
	void main_bar(void)
	{
		char options = '\0';
		char choice;
		switch_case://For GOTO statement
			
		system("cls");
		
		printf("\nA.Issue an item \nB.To Return an issued item \nC.Trace an item with id \nD.Report a lost item \nE.Report or add a complain \nF.Quit program \nG.Clear screen ");
		printf("\nChoice: ");
		scanf("%s",&options);
		
		choice = tolower(options);
		
		switch(choice)
		{
			case 'a':
				
				system("cls");
				add_item();
				break;
				
			case'b':
				
				Remove_item();
				break;
				
			case'c':
				
				Trace();
				break;
				
			case'd':
				
				 lost_item();
				 goto switch_case;
				break;
				
			case'e':
				
				Report_Complain();
				break;	
				
			case 'f' :
				
				printf("Closing Program");		
				printf("\nPrinting Summary: ");
				summary();
				printf("Press any key to exit");
				getch();
				exit(1);	
				break;
			case'g':
				
				system("cls");
				goto switch_case;
				break;
				
			default:
				
				printf("Enter Valid options");
				getch();
				goto switch_case;
				
		}
	}
				
	void del_rec_warn_b(char id[8])
		{
			char str1[100]= "" ;
			char str2[30];

			FILE *ptr;
			FILE *temp_ptr;
		
			ptr = fopen("warn_b.txt","r");
			temp_ptr=fopen("temp.txt","w");
			
			while(fgets(str1, 100 ,ptr) != NULL)
			{
				if(strstr(str1,id)!=NULL)
				{
					;
				}
				else
				{
					fprintf(temp_ptr,"%s\n",str1);
				}
			}
			fclose(ptr);
			fclose(temp_ptr);
			
			temp_ptr = fopen("temp.txt","r+");
			ptr=fopen("warn_b.txt","w+");
			
			while(fgets(str2, 100 ,temp_ptr) != NULL)
			{
				fprintf(ptr,"%s\n",str2);
			}
			
			fclose(temp_ptr);
			fclose(ptr);	
			
			return;	
			}
	void del_rec_warn_a(char id[8])
		{
			char str1[100]= "" ;
			char str2[30];
			
			FILE *ptr;
			FILE *temp_ptr;
		
			ptr = fopen("warn_a.txt","r");
			temp_ptr=fopen("temp.txt","w");
			
			while(fgets(str1, 100 ,ptr) != NULL)
			{	
			
				if(strstr(str1,id)!=NULL)
				{	
					;
				}
				else
				{
					fprintf(temp_ptr,"%s",str1);
				}
			}
			
			fclose(ptr);
			fclose(temp_ptr);
			
			temp_ptr = fopen("temp.txt","r");
			ptr = fopen("warn_a.txt","w");
			
			while(fgets(str2, 100 ,temp_ptr)!= NULL)
			{
				fprintf(ptr,"%s",str2);
			}
			
			fclose(temp_ptr);
			fclose(ptr);
			
			return;	
		}
		
	void del_rec_record(char id[8])
		{
			char str1[100]= "" ;
			char str2[30];
			
			FILE *ptr;
			FILE *temp_ptr;
		
			ptr = fopen("record.txt","r");
			temp_ptr=fopen("temp.txt","w");
			
			while(fgets(str1, 100 ,ptr) != NULL)
			{
		
			if(strstr(str1,id)!=NULL)
			{
				;
			}
			else
			{
				fprintf(temp_ptr,"%s",str1);
			}
		}
			fclose(ptr);
			fclose(temp_ptr);
			
			temp_ptr = fopen("temp.txt","r");
			ptr = fopen("record.txt","w");
			
			while(fgets(str2, 100 ,temp_ptr)!= NULL)
			{
				fprintf(ptr,"%s",str2);
			}
			
			fclose(temp_ptr);
			fclose(ptr);
			
			return;
		}
		
//function for getting user id and passsword
user get_user()
{ 
	char ch;
	int i;
	user login;
	fflush(stdin);
	
	//getting user id
	printf("Enter User id: ");
	gets(login.name);	
						
	//getting user password	in form of stars
	printf("Enter User Password: ");
    for (i = 0; i < 50; i++)
	 {
    	
    	fflush(stdin);
        ch = getch();
        if (ch != 13) 
		{
            login.pass[i] = ch;
            ch = '*';
            printf("%c", ch);		
        }
        else
        {
        	login.pass[i] = '\0';
            break;
		}
    }	
	printf("\n");	
	return login;
}

//function to compare admin user id and password
int admin_check(char *name, char *pass)
{
	user check;
	
	FILE *fadmin;
	
	// Cheking if admin txt file exists	
	if((fadmin = fopen("admin.txt", "r")) == NULL)
	{
		printf("Error File does not Exist!\n");
		getch();
		return 0;
	}
	
	//Running while loop to scan file for user id and passswords line by line
	while((fscanf(fadmin,"%s %s",check.name,check.pass)) != EOF)
	{
		
		//Comparing user id and passs from txt file to  verify user
		if(strcmp(name,check.name) == 0)
		{
			if(strcmp(pass,check.pass) == 0)
			{
				return 1;
			}
			else
			{
				printf("Incorrect Password!\n");
				getch();
				return 0;
			}
		}
	}
	
	printf("\nUser Does Not Exist!\n");
	getch();
	return 0;
	fclose(fadmin);
		
}

//function To print start screen
void start_screen()
{
	do{
		int i;
		system("cls");
		printf("\t======================================================================================================================================");
		printf("\n\n\t\t\t\t\t\tSports Equipment System\n\n");
		printf("\t======================================================================================================================================");
		printf("\nPress Enter to proceed...");
		
		}while(!(getch()==13));
		
	system("cls");
}

//function to create manager account
int crt_manager()
{
	int ctr = 0;
	user check;
	user manager;
	int counter;
	
	do
	{
	counter = 0;
	system("cls");
	
	printf("Enter Manager Account Id and password to create account\n");
	manager = get_user();
	
	//opening manager .txt file
	FILE *fmanage;
	
	//checking if it exists
	if((fmanage = fopen("user.txt", "r")) == NULL)
	{
		ctr++;
	}
	if(ctr == 0)
	{
	//Running while loop to scan file for user id and passswords line by line To verify if the user does not already exist
	while((fscanf(fmanage,"%s %s",check.name,check.pass)) != EOF)
	{
		//checking if user name already exists
		if(strcmp(check.name,manager.name) == 0)
		{
			counter++;
			printf("User Name already Exist!!\n");
			getch();
		}
	}
	}
	fclose(fmanage);
	
	}while(counter != 0); // repeating get_user if the user name already exists in txt file
	
	FILE *fmanager;
	fmanager = fopen("user.txt","a");
	
	fprintf(fmanager,"%s %s\n",manager.name,manager.pass);
	fclose(fmanager);
		
	return 1;
}

//Checking Manager Id and password
int manager_check(char *name, char *pass)
{
	user check;
	
	//Opening .txt file containing manager name and pass in file pointer
	FILE *fmanage;
	
	if((fmanage = fopen("user.txt", "r")) == NULL)
	{
		printf("Error File does not Exist!\n");
		getch();
		return 0;
	}
	
	//Running while loop to scan file for user id and passswords line by line
	while((fscanf(fmanage,"%s %s",check.name,check.pass)) != EOF)
	{
		//Comparing user id and passs from txt file to  verify user
		if(strcmp(name,check.name) == 0)
		{
			if(strcmp(pass,check.pass) == 0)
			{
				return 1;
			}
			else
			{
				printf("Incorrect Password!\n");
				getch();
				return 0;
			}
		}
	}
	
	fclose(fmanage);
		
	printf("User Does Not Exist!\n");
	getch();
	return 0;		
}

//To Check if the User has More than 2 warnings
int block(char id[8])
	{	
		int check = 0;
		char str[50];
		
		FILE *block;
		
		block = fopen("block.txt","r");
		
		while(fgets(str,50,block) != NULL)
		{
			if(strstr(str,id) != NULL)
			{
				check = 1;
				break;
//				return check;
			}
			else
			check = 0;
		}
		
		return check;
	}
// TO Display complaints from students to admin
void display_complain()
{
	FILE *fcomplain;
	char *id;
	char *name;
	char *complain;
	
	id = (char*) calloc(8,sizeof(char));
	name = (char*) calloc(20,sizeof(char));
	complain = (char*) calloc(150,sizeof(char));
	
	if((fcomplain = fopen("complain.txt","r"))== NULL)
	{
		printf("No Complaints reported");
		return;
	}
	while((fscanf(fcomplain,"%s %s %s",name,id,complain)) != EOF)
	{	
		printf("Name: %s\nID:%s\nComplaint: %s\n\n",name,id,complain);
	}
	printf("Press Enter to continue....");
	getch();
}
void item_ret_rec(char id[8],char item[15])
{
	FILE *ptr;
	ptr = fopen("Return.txt","a");
	fprintf(ptr,"%s has returned %s\n",id,item);
	fclose(ptr);
}
void summary (void){
	char str1[20];
	
	FILE *records;
	FILE *retur;
	FILE *block;
	
	records = fopen("record.txt","r+");
	printf("\nAll item taken are: \n");
	while(fgets(str1,100,records)!=NULL){
		printf("%s\n",str1);
	}
	fclose(records);
	retur = fopen("Return.txt","r+");
	printf("\nAll item returned are: \n");
	while(fgets(str1,100,retur)!=NULL){
		printf("%s\n",str1);
	
	}
	fclose(retur);
	block = fopen("block.txt","r+");
	printf("\nAll block user are: \n");
	while(fgets(str1,100,block)!=NULL){
		printf("%s\n",str1);
	}
	fclose(block);
	
	}
	
	
