//One of the master coders designed a subscript block that stores random characters in a
//multidimensional array. You are asked to design a program that will find a given string in a
//multidimensional array of characters. The search for characters can be present and operational from
//left to right and top to down only. The program should create a 6 x 5 2D array and populate it with
//random alphabet characters. After that, the program should print it in a tabular form as shown
//below.
//Search the user-entered string in the 2D array, if it is present then add a point to the score, if it is
//
//not available then subtract one. Print the score at every input. The program stops asking and re-
//populates the 2D array with new random characters when the user enters “END” as the string.
//
//[NOTE: After generating random numbers, the last row should have your student ID’s last four
//digits]
//Example:
//Array:
//E D D F R R
//A F V A Q R
//T E B S T A
//L J G T T A
//1 2 3 4 Q K
//
//Search Str= ‘FAST’
//Output:
//FAST is present? Score 1
//EAT is present? Score 2
//GREAT is not present ? Score 1


#include<stdio.h>
#include<stdlib.h>
#include<string.h>
//void search void 
int main(){
	int pass1=0;
	int pass=0;
	char table[5][6];
	int i,j;
	int upper = 83, lower = 65;
	char inp[10];
	do{
	
	for(i = 0; i<5;i++){
		for(j=0;j<6;j++){
//			table[i][j] ="abcdefghijklmnopqrstuvxyz"[rand() % 26];
            table[i][j] = (rand()%(upper - lower + 1)+lower);
		}
	}
	for(i = 0; i<5;i++){
		for(j=0;j<6;j++){
//			table[i][j] = printf("%c\n","ABCDEFGHIJKLMNOPQRSTUVWXYZ"[rand() % 26]);
			printf("%c",table[i][j]);
		}
		
		printf("\n")	;
	}
	puts("Enter \"Exit\" to regenerate Random letters OR Enter Search to find strings");
	int k;
	scanf("%s",&inp);
	if(strcmp(inp,"Search" ) == 0){
	 printf("Enter Strings to find: ");
	 char search_arr[5];
	 
	 scanf("%s",search_arr);
	 int index =0, len=strlen(search_arr);
	 
 	 for(i = 0; i<5;i++){
		for(j=0;j<6;j++){
			int k=0;
			while(k!=len){
			k++;
			if(search_arr[j]==table[i][j]){
				index++;
				pass++;
				if(search_arr[j]==table[i][j]){
						pass =0;
					break;
				
				}
//				printf("\n ind: %d\t",index);
//				printf("len: %d\n",len);
//				printf("k: %d\n",k);
			
				}
				
			}
			
			if(index == len){
				pass=1;
				printf("String found at row %d",i+1);
				break;
			}

		}

		index =0;
		
	}
	
//	if(pass != 1){
//		printf("String not found");
//	}
	for(i = 0; i<6;i++){
		for(j=0;j<5;j++){
			int k=0;
			while(k!=len){
			k++;
			if(search_arr[j]==table[j][i]){
				index++;
				pass1++;
				if(search_arr[j]==table[j][i]){
						pass1=0;
					break;
				
				}
//				printf("\n ind: %d\t",index);
//				printf("len: %d\n",len);
//				printf("k: %d\n",k);
			
				}
				
			}
			
			if(index == len){
				pass1=1;
				printf("String found at coloumn %d",i+1);
				break;
			}

		}

		index =0;
		
	}
	if(pass1 != 1 && pass != 1){
		printf("String not found");}
}
	
	else if(strcmp(inp,"Exit" ) == 0){

}
	else{
		printf("You Entered Invalid option program exits");
		exit(1);
	}
		
	
	}while(strcmp("Exit",inp )== 0);

}
